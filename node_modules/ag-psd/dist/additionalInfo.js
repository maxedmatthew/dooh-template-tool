"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var effectsHelpers_1 = require("./effectsHelpers");
var helpers_1 = require("./helpers");
var psdReader_1 = require("./psdReader");
var psdWriter_1 = require("./psdWriter");
var descriptor_1 = require("./descriptor");
var handlers = [];
var handlersMap = {};
function addHandler(key, has, read, write) {
    var handler = { key: key, has: has, read: read, write: write };
    handlers.push(handler);
    handlersMap[handler.key] = handler;
}
function getHandler(key) {
    return handlersMap[key];
}
exports.getHandler = getHandler;
function getHandlers() {
    return handlers;
}
exports.getHandlers = getHandlers;
function revMap(map) {
    var result = {};
    Object.keys(map).forEach(function (key) { return result[map[key]] = key; });
    return result;
}
// textGridding.None
var textGridding = {
    none: 'None',
};
var textGriddingRev = revMap(textGridding);
function toTextGridding(value) {
    return textGriddingRev[value.split('.')[1]] || 'none';
}
function fromTextGridding(value) {
    return "textGridding." + (textGridding[value] || 'None');
}
// Ornt.Hrzn | Ornt.Vrtc
var Ornt = {
    horizontal: 'Hrzn',
    vertical: 'Vrtc',
};
var OrntRev = revMap(Ornt);
function toOrientation(value) {
    return OrntRev[value.split('.')[1]] || 'horizontal';
}
function fromOrientation(value) {
    return "textGridding." + (Ornt[value] || 'Hrzn');
}
// Annt.antiAliasSharp | Annt.Anno | Annt.AnCr | Annt.AnSt | Annt.AnSm
var Annt = {
    none: 'Anno',
    sharp: 'antiAliasSharp',
    crisp: 'AnCr',
    strong: 'AnSt',
    smooth: 'AnSm',
};
var AnntRev = revMap(Annt);
function toAntialias(value) {
    return AnntRev[value.split('.')[1]] || 'none';
}
function fromAntialias(value) {
    return "Annt." + (Annt[value] || 'Anno');
}
// warpStyle.warpNone | warpStyle.warpArc | warpStyle.warpArcLower | warpStyle.warpArcUpper | warpStyle.warpArch
// warpStyle.warpBulge | warpStyle.warpShellLower | warpStyle.warpShellUpper | warpStyle.warpFlag
// warpStyle.warpWave | warpStyle.warpFish | warpStyle.warpRise | warpStyle.warpFisheye |
// warpStyle.warpInflate | warpStyle.warpSqueeze | warpStyle.warpTwist
var warpStyle = {
    none: 'warpNone',
    arc: 'warpArc',
    arcLower: 'warpArcLower',
    arcUpper: 'warpArcUpper',
    arch: 'warpArch',
    bulge: 'warpBulge',
    shellLower: 'warpShellLower',
    shellUpper: 'warpShellUpper',
    flag: 'warpFlag',
    wave: 'warpWave',
    fish: 'warpFish',
    rise: 'warpRise',
    fisheye: 'warpFisheye',
    inflate: 'warpInflate',
    squeeze: 'warpSqueeze',
    twist: 'warpTwist',
};
var warpStyleRev = revMap(warpStyle);
function toWarpStyle(value) {
    return warpStyleRev[value.split('.')[1]] || 'none';
}
function fromWarpStyle(value) {
    return "warpStyle." + (warpStyle[value] || 'warpNone');
}
addHandler('TySh', function (target) { return target.text !== undefined; }, function (reader, target) {
    var version = psdReader_1.readInt16(reader);
    if (version !== 1) {
        throw new Error("Invalid TySh version: " + version);
    }
    var transform = [
        psdReader_1.readFloat64(reader),
        psdReader_1.readFloat64(reader),
        psdReader_1.readFloat64(reader),
        psdReader_1.readFloat64(reader),
        psdReader_1.readFloat64(reader),
        psdReader_1.readFloat64(reader),
    ];
    var textVersion = psdReader_1.readInt16(reader);
    var descriptorVersion = psdReader_1.readInt32(reader);
    if (textVersion !== 50 || descriptorVersion !== 16) {
        throw new Error("Invalid TySh text version: " + textVersion + "/" + descriptorVersion);
    }
    var text = descriptor_1.readDescriptorStructure(reader);
    // console.log('EngineData:', JSON.stringify(parseEngineData(text.EngineData), null, 2), '\n');
    var warpVersion = psdReader_1.readInt16(reader);
    var warpDescriptorVersion = psdReader_1.readInt32(reader);
    if (warpVersion !== 1 || warpDescriptorVersion !== 16) {
        throw new Error("Invalid TySh warp version: " + warpVersion + " " + warpDescriptorVersion);
    }
    var warp = descriptor_1.readDescriptorStructure(reader);
    var left = psdReader_1.readInt32(reader);
    var top = psdReader_1.readInt32(reader);
    var right = psdReader_1.readInt32(reader);
    var bottom = psdReader_1.readInt32(reader);
    target.text = {
        transform: transform, left: left, top: top, right: right, bottom: bottom,
        text: text['Txt '],
        index: text.TextIndex || 0,
        gridding: toTextGridding(text.textGridding),
        antialias: toAntialias(text.AntA),
        orientation: toOrientation(text.Ornt),
        warp: {
            style: toWarpStyle(warp.warpStyle),
            value: warp.warpValue || 0,
            perspective: warp.warpPerspective || 0,
            perspectiveOther: warp.warpPerspectiveOther || 0,
            rotate: toOrientation(warp.warpRotate),
        },
    };
}, function (writer, target) {
    var text = target.text;
    var warp = text.warp || {};
    var transform = text.transform || [1, 0, 0, 1, 0, 0];
    var textDescriptor = {
        'Txt ': text.text,
        textGridding: fromTextGridding(text.gridding),
        Ornt: fromOrientation(text.orientation),
        AntA: fromAntialias(text.antialias),
        TextIndex: text.index || 0,
    };
    var warpDescriptor = {
        warpStyle: fromWarpStyle(warp.style),
        warpValue: warp.value || 0,
        warpPerspective: warp.perspective || 0,
        warpPerspectiveOther: warp.perspectiveOther || 0,
        warpRotate: fromOrientation(warp.rotate),
    };
    psdWriter_1.writeInt16(writer, 1); // version
    for (var i = 0; i < 6; i++) {
        psdWriter_1.writeFloat64(writer, transform[i] || 0);
    }
    psdWriter_1.writeInt16(writer, 50); // text version
    psdWriter_1.writeInt32(writer, 16); // text descriptor version
    descriptor_1.writeDescriptorStructure(writer, '', 'TxLr', textDescriptor);
    psdWriter_1.writeInt16(writer, 1); // warp version
    psdWriter_1.writeInt32(writer, 16); // warp descriptor version
    descriptor_1.writeDescriptorStructure(writer, '', 'warp', warpDescriptor);
    psdWriter_1.writeInt32(writer, text.left || 0);
    psdWriter_1.writeInt32(writer, text.top || 0);
    psdWriter_1.writeInt32(writer, text.right || 0);
    psdWriter_1.writeInt32(writer, text.bottom || 0);
});
addHandler('luni', function (target) { return target.name !== undefined; }, function (reader, target, left) {
    target.name = psdReader_1.readUnicodeString(reader);
    psdReader_1.skipBytes(reader, left()); // TEMP: skipping
}, function (writer, target) {
    psdWriter_1.writeUnicodeString(writer, target.name);
});
addHandler('lnsr', function (target) { return target.nameSource !== undefined; }, function (reader, target) { return target.nameSource = psdReader_1.readSignature(reader); }, function (writer, target) { return psdWriter_1.writeSignature(writer, target.nameSource); });
addHandler('lyid', function (target) { return target.id !== undefined; }, function (reader, target) { return target.id = psdReader_1.readUint32(reader); }, function (writer, target) { return psdWriter_1.writeUint32(writer, target.id); });
addHandler('clbl', function (target) { return target.blendClippendElements !== undefined; }, function (reader, target) {
    target.blendClippendElements = !!psdReader_1.readUint8(reader);
    psdReader_1.skipBytes(reader, 3);
}, function (writer, target) {
    psdWriter_1.writeUint8(writer, target.blendClippendElements ? 1 : 0);
    psdWriter_1.writeZeros(writer, 3);
});
addHandler('infx', function (target) { return target.blendInteriorElements !== undefined; }, function (reader, target) {
    target.blendInteriorElements = !!psdReader_1.readUint8(reader);
    psdReader_1.skipBytes(reader, 3);
}, function (writer, target) {
    psdWriter_1.writeUint8(writer, target.blendInteriorElements ? 1 : 0);
    psdWriter_1.writeZeros(writer, 3);
});
addHandler('knko', function (target) { return target.knockout !== undefined; }, function (reader, target) {
    target.knockout = !!psdReader_1.readUint8(reader);
    psdReader_1.skipBytes(reader, 3);
}, function (writer, target) {
    psdWriter_1.writeUint8(writer, target.knockout ? 1 : 0);
    psdWriter_1.writeZeros(writer, 3);
});
addHandler('lspf', function (target) { return target.protected !== undefined; }, function (reader, target) {
    var flags = psdReader_1.readUint32(reader);
    target.protected = {
        transparency: (flags & 0x01) !== 0,
        composite: (flags & 0x02) !== 0,
        position: (flags & 0x04) !== 0,
    };
}, function (writer, target) {
    var flags = (target.protected.transparency ? 0x01 : 0) |
        (target.protected.composite ? 0x02 : 0) |
        (target.protected.position ? 0x04 : 0);
    psdWriter_1.writeUint32(writer, flags);
});
addHandler('lclr', function (target) { return target.sheetColors !== undefined; }, function (reader, target) {
    target.sheetColors = {
        color1: psdReader_1.readUint32(reader),
        color2: psdReader_1.readUint32(reader),
    };
}, function (writer, target) {
    psdWriter_1.writeUint32(writer, target.sheetColors.color1);
    psdWriter_1.writeUint32(writer, target.sheetColors.color2);
});
addHandler('shmd', function (target) { return target.metadata !== undefined; }, function (reader, target) {
    var count = psdReader_1.readUint32(reader);
    target.metadata = [];
    for (var i = 0; i < count; i++) {
        var signature = psdReader_1.readSignature(reader);
        if (signature !== '8BIM')
            throw new Error("Invalid signature: '" + signature + "'");
        var key = psdReader_1.readSignature(reader);
        var copy = !!psdReader_1.readUint8(reader);
        psdReader_1.skipBytes(reader, 3);
        var length_1 = psdReader_1.readUint32(reader);
        var data = helpers_1.toArray(psdReader_1.readBytes(reader, length_1));
        target.metadata.push({ key: key, copy: copy, data: data });
    }
}, function (writer, target) {
    psdWriter_1.writeUint32(writer, target.metadata.length);
    for (var i = 0; i < target.metadata.length; i++) {
        var item = target.metadata[i];
        psdWriter_1.writeSignature(writer, '8BIM');
        psdWriter_1.writeSignature(writer, item.key);
        psdWriter_1.writeUint8(writer, item.copy ? 1 : 0);
        psdWriter_1.writeZeros(writer, 3);
        psdWriter_1.writeUint32(writer, item.data.length);
        psdWriter_1.writeBytes(writer, new Uint8Array(item.data));
    }
});
addHandler('fxrp', function (target) { return target.referencePoint !== undefined; }, function (reader, target) {
    target.referencePoint = {
        x: psdReader_1.readFloat64(reader),
        y: psdReader_1.readFloat64(reader),
    };
}, function (writer, target) {
    psdWriter_1.writeFloat64(writer, target.referencePoint.x);
    psdWriter_1.writeFloat64(writer, target.referencePoint.y);
});
addHandler('lsct', function (target) { return target.sectionDivider !== undefined; }, function (reader, target, left) {
    var item = {};
    item.type = psdReader_1.readUint32(reader);
    if (left()) {
        var signature = psdReader_1.readSignature(reader);
        if (signature !== '8BIM')
            throw new Error("Invalid signature: '" + signature + "'");
        item.key = psdReader_1.readSignature(reader);
    }
    if (left()) {
        // 0 = normal
        // 1 = scene group, affects the animation timeline.
        item.subType = psdReader_1.readUint32(reader);
    }
    target.sectionDivider = item;
}, function (writer, target) {
    psdWriter_1.writeUint32(writer, target.sectionDivider.type);
    if (target.sectionDivider.key) {
        psdWriter_1.writeSignature(writer, '8BIM');
        psdWriter_1.writeSignature(writer, target.sectionDivider.key);
        if (target.sectionDivider.subtype !== undefined)
            psdWriter_1.writeUint32(writer, target.sectionDivider.subtype);
    }
});
addHandler('lyvr', function (target) { return target.version !== undefined; }, function (reader, target) {
    target.version = psdReader_1.readUint32(reader);
}, function (writer, target) {
    psdWriter_1.writeUint32(writer, target.version);
});
addHandler('lrFX', function (target) { return target.effects !== undefined; }, function (reader, target, left) {
    target.effects = effectsHelpers_1.readEffects(reader);
    psdReader_1.skipBytes(reader, left()); // TEMP: skipping
}, function (writer, target) {
    effectsHelpers_1.writeEffects(writer, target.effects);
});
// addHandler(
// 	'Txt2',
// 	target => !!(target as any)['__Txt2'], // target.text !== undefined,
// 	(reader, target, left) => {
// 		const textEngineData = readBytes(reader, left());
// 		(target as any)['__Txt2'] = Array.from(textEngineData);
// 		console.log('Txt2:textEngineData', parseEngineData(textEngineData));
// 	},
// 	(writer, target) => {
// 		writeBytes(writer, new Uint8Array((target as any)['__Txt2'])); // new Uint8Array(target.textEngineData!));
// 	},
// );
addHandler('FMsk', function (target) { return target.filterMask !== undefined; }, function (reader, target) {
    target.filterMask = {
        colorSpace: helpers_1.readColor(reader),
        opacity: psdReader_1.readUint16(reader),
    };
}, function (writer, target) {
    psdWriter_1.writeBytes(writer, new Uint8Array(target.filterMask.colorSpace));
    psdWriter_1.writeUint16(writer, target.filterMask.opacity);
});
// TODO: implement
addHandler('lfx2', function (target) { return !target; }, // target.objectBasedEffectsLayerInfo !== undefined,
function (reader, _target, left) {
    psdReader_1.skipBytes(reader, left());
    // const version = readUint32(reader);
    // const descriptorVersion = readUint32(reader);
    // const name = reader.readUnicodeString();
    // const classId = readStringOrClassId(reader);
    // const itemsCount = readUint32(reader);
    //for (let i = 0; i < itemsCount; i++) {
    //	console.log('read item');
    //	const key = readStringOrClassId(reader);
    //	console.log('key', [key]);
    //}
    //target.objectBasedEffectsLayerInfo = {
    //	version,
    //	descriptorVersion,
    //	descriptor: {
    //		name,
    //		classId,
    //		//...
    //	},
    //};
}, function (_writer, _target) {
    //...
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
