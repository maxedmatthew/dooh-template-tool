"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var psd_1 = require("./psd");
var helpers_1 = require("./helpers");
var additionalInfo_1 = require("./additionalInfo");
var imageResources_1 = require("./imageResources");
function createWriter(size) {
    if (size === void 0) { size = 1024; }
    var buffer = new ArrayBuffer(size);
    var view = new DataView(buffer);
    var offset = 0;
    return { buffer: buffer, view: view, offset: offset };
}
exports.createWriter = createWriter;
function getWriterBuffer(writer) {
    return writer.buffer.slice(0, writer.offset);
}
exports.getWriterBuffer = getWriterBuffer;
function writeUint8(writer, value) {
    var offset = addSize(writer, 1);
    writer.view.setUint8(offset, value);
}
exports.writeUint8 = writeUint8;
function writeInt16(writer, value) {
    var offset = addSize(writer, 2);
    writer.view.setInt16(offset, value, false);
}
exports.writeInt16 = writeInt16;
function writeUint16(writer, value) {
    var offset = addSize(writer, 2);
    writer.view.setUint16(offset, value, false);
}
exports.writeUint16 = writeUint16;
function writeInt32(writer, value) {
    var offset = addSize(writer, 4);
    writer.view.setInt32(offset, value, false);
}
exports.writeInt32 = writeInt32;
function writeUint32(writer, value) {
    var offset = addSize(writer, 4);
    writer.view.setUint32(offset, value, false);
}
exports.writeUint32 = writeUint32;
function writeInt32At(writer, value, offset) {
    writer.view.setInt32(offset, value, false);
}
exports.writeInt32At = writeInt32At;
function writeFloat32(writer, value) {
    var offset = addSize(writer, 4);
    writer.view.setFloat32(offset, value, false);
}
exports.writeFloat32 = writeFloat32;
function writeFloat64(writer, value) {
    var offset = addSize(writer, 8);
    writer.view.setFloat64(offset, value, false);
}
exports.writeFloat64 = writeFloat64;
function writeBytes(writer, buffer) {
    if (buffer) {
        ensureSize(writer, writer.offset + buffer.length);
        var bytes = new Uint8Array(writer.buffer);
        bytes.set(buffer, writer.offset);
        writer.offset += buffer.length;
    }
}
exports.writeBytes = writeBytes;
function writeZeros(writer, count) {
    for (var i = 0; i < count; i++) {
        writeUint8(writer, 0);
    }
}
exports.writeZeros = writeZeros;
function writeSignature(writer, signature) {
    if (signature.length !== 4) {
        throw new Error("Invalid signature: '" + signature + "'");
    }
    for (var i = 0; i < 4; i++) {
        writeUint8(writer, signature.charCodeAt(i));
    }
}
exports.writeSignature = writeSignature;
// export function writeUtf8String(writer: PsdWriter, value: string) {
// 	const buffer = encodeString(value);
// 	writeBytes(writer, buffer);
// }
function writePascalString(writer, text, padTo) {
    if (padTo === void 0) { padTo = 2; }
    var length = text.length;
    writeUint8(writer, length);
    for (var i = 0; i < length; i++) {
        var code = text.charCodeAt(i);
        writeUint8(writer, code < 128 ? code : '?'.charCodeAt(0));
    }
    while (++length % padTo) {
        writeUint8(writer, 0);
    }
}
exports.writePascalString = writePascalString;
function writeUnicodeString(writer, text) {
    writeUint32(writer, text.length);
    for (var i = 0; i < text.length; i++) {
        writeUint16(writer, text.charCodeAt(i));
    }
}
exports.writeUnicodeString = writeUnicodeString;
function writeUnicodeStringWithPadding(writer, text) {
    writeUint32(writer, text.length + 1);
    for (var i = 0; i < text.length; i++) {
        writeUint16(writer, text.charCodeAt(i));
    }
    writeUint16(writer, 0);
}
exports.writeUnicodeStringWithPadding = writeUnicodeStringWithPadding;
function writeBuffer(writer, buffer) {
    if (buffer) {
        writeBytes(writer, buffer);
    }
}
exports.writeBuffer = writeBuffer;
function getLayerSize(layer) {
    if (layer.canvas) {
        var _a = helpers_1.getLayerDimentions(layer), width = _a.width, height = _a.height;
        return 2 * height + 2 * width * height;
    }
    else {
        return 0;
    }
}
function getLargestLayerSize(layers) {
    if (layers === void 0) { layers = []; }
    return layers.reduce(function (max, layer) { return Math.max(max, getLayerSize(layer), getLargestLayerSize(layer.children)); }, 0);
}
function writeSection(writer, round, func) {
    var offset = writer.offset;
    writeInt32(writer, 0);
    func();
    var length = writer.offset - offset - 4;
    while ((length % round) !== 0) {
        writeUint8(writer, 0);
        length++;
    }
    writeInt32At(writer, length, offset);
}
function writePsd(writer, psd, options) {
    if (options === void 0) { options = {}; }
    if (!(+psd.width > 0 && +psd.height > 0))
        throw new Error('Invalid document size');
    var imageResources = psd.imageResources || {};
    if (options.generateThumbnail) {
        imageResources = __assign({}, imageResources, { thumbnail: createThumbnail(psd) });
    }
    var canvas = psd.canvas;
    if (canvas && (psd.width !== canvas.width || psd.height !== canvas.height)) {
        throw new Error('Document canvas must have the same size as document');
    }
    var imageData = canvas && canvas.getContext('2d').getImageData(0, 0, canvas.width, canvas.height);
    var globalAlpha = !!imageData && helpers_1.hasAlpha(imageData);
    var maxBufferSize = Math.max(getLargestLayerSize(psd.children), 4 * 2 * psd.width * psd.height + 2 * psd.height);
    var tempBuffer = new Uint8Array(maxBufferSize);
    writeHeader(writer, psd, globalAlpha);
    writeColorModeData(writer, psd);
    writeImageResources(writer, imageResources);
    writeLayerAndMaskInfo(tempBuffer, writer, psd, globalAlpha, options);
    writeImageData(tempBuffer, writer, globalAlpha, psd.width, psd.height, imageData);
}
exports.writePsd = writePsd;
function writeHeader(writer, psd, globalAlpha) {
    writeSignature(writer, '8BPS');
    writeUint16(writer, 1); // version
    writeZeros(writer, 6);
    writeUint16(writer, globalAlpha ? 4 : 3); // channels
    writeUint32(writer, psd.height);
    writeUint32(writer, psd.width);
    writeUint16(writer, 8); // bits per channel
    writeUint16(writer, 3 /* RGB */);
}
function writeColorModeData(writer, _psd) {
    writeSection(writer, 1, function () {
        // TODO: implement
    });
}
function writeImageResources(writer, imageResources) {
    writeSection(writer, 1, function () {
        var _loop_1 = function (handler) {
            if (handler.has(imageResources)) {
                writeSignature(writer, '8BIM');
                writeUint16(writer, handler.key);
                writePascalString(writer, '');
                writeSection(writer, 2, function () { return handler.write(writer, imageResources); });
            }
        };
        for (var _i = 0, _a = imageResources_1.getHandlers(); _i < _a.length; _i++) {
            var handler = _a[_i];
            _loop_1(handler);
        }
    });
}
function writeLayerAndMaskInfo(tempBuffer, writer, psd, globalAlpha, options) {
    writeSection(writer, 2, function () {
        writeLayerInfo(tempBuffer, writer, psd, globalAlpha, options);
        writeGlobalLayerMaskInfo(writer);
        writeAdditionalLayerInfo(writer, psd);
    });
}
function writeLayerInfo(tempBuffer, writer, psd, globalAlpha, options) {
    writeSection(writer, 2, function () {
        var layers = [];
        addChildren(layers, psd.children);
        if (!layers.length) {
            layers.push({});
        }
        writeInt16(writer, globalAlpha ? -layers.length : layers.length);
        var layerData = layers.map(function (l, i) { return helpers_1.getChannels(tempBuffer, l, i === 0, options); });
        layerData.forEach(function (l) { return writeLayerRecord(writer, psd, l); });
        layerData.forEach(function (l) { return writeLayerChannelImageData(writer, l); });
    });
}
var LayerFlags;
(function (LayerFlags) {
    LayerFlags[LayerFlags["TransparencyProtected"] = 1] = "TransparencyProtected";
    LayerFlags[LayerFlags["Hidden"] = 2] = "Hidden";
    LayerFlags[LayerFlags["Obsolete"] = 4] = "Obsolete";
    LayerFlags[LayerFlags["HasRelevantBit4"] = 8] = "HasRelevantBit4";
    LayerFlags[LayerFlags["PixelDataIrrelevantToAppearanceOfDocument"] = 16] = "PixelDataIrrelevantToAppearanceOfDocument";
})(LayerFlags || (LayerFlags = {}));
function writeLayerRecord(writer, psd, layerData) {
    var layer = layerData.layer, top = layerData.top, left = layerData.left, bottom = layerData.bottom, right = layerData.right, channels = layerData.channels;
    writeInt32(writer, top);
    writeInt32(writer, left);
    writeInt32(writer, bottom);
    writeInt32(writer, right);
    writeUint16(writer, channels.length);
    for (var _i = 0, channels_1 = channels; _i < channels_1.length; _i++) {
        var c = channels_1[_i];
        writeInt16(writer, c.channelId);
        writeInt32(writer, c.length);
    }
    writeSignature(writer, '8BIM');
    writeSignature(writer, psd_1.fromBlendMode[layer.blendMode || 'normal']);
    writeUint8(writer, typeof layer.opacity !== 'undefined' ? layer.opacity : 255);
    writeUint8(writer, layer.clipping ? 1 : 0);
    var flags = 0 |
        (layer.transparencyProtected ? 1 /* TransparencyProtected */ : 0) |
        (layer.hidden ? 2 /* Hidden */ : 0) |
        8 /* HasRelevantBit4 */;
    writeUint8(writer, flags);
    writeUint8(writer, 0); // filler
    writeSection(writer, 1, function () {
        writeLayerMaskData(writer, layer, layerData);
        writeLayerBlendingRanges(writer, psd);
        writePascalString(writer, layer.name || '', 4);
        writeAdditionalLayerInfo(writer, layer);
    });
}
function writeLayerMaskData(writer, _a, layerData) {
    var mask = _a.mask;
    writeSection(writer, 4, function () {
        if (mask && layerData.mask) {
            writeInt32(writer, layerData.mask.top);
            writeInt32(writer, layerData.mask.left);
            writeInt32(writer, layerData.mask.bottom);
            writeInt32(writer, layerData.mask.right);
            writeUint8(writer, mask.defaultColor || 0);
            var flags = 0 |
                (mask.disabled ? 2 /* LayerMaskDisabled */ : 0) |
                (mask.positionRelativeToLayer ? 1 /* PositionRelativeToLayer */ : 0);
            writeUint8(writer, flags);
            var parameters = 0 |
                (mask.userMaskDensity !== undefined ? 1 /* UserMaskDensity */ : 0) |
                (mask.userMaskFeather !== undefined ? 2 /* UserMaskFeather */ : 0) |
                (mask.vectorMaskDensity !== undefined ? 1 /* UserMaskDensity */ : 0) |
                (mask.vectorMaskFeather !== undefined ? 2 /* UserMaskFeather */ : 0);
            if (parameters) {
                writeUint8(writer, parameters);
                if (mask.userMaskDensity !== undefined)
                    writeUint8(writer, mask.userMaskDensity);
                if (mask.userMaskFeather !== undefined)
                    writeFloat64(writer, mask.userMaskFeather);
                if (mask.vectorMaskDensity !== undefined)
                    writeUint8(writer, mask.vectorMaskDensity);
                if (mask.vectorMaskFeather !== undefined)
                    writeFloat64(writer, mask.vectorMaskFeather);
            }
            // TODO: handler rest of the fields
            // writeZeros(writer, 2);
        }
    });
}
function writeLayerBlendingRanges(writer, psd) {
    writeSection(writer, 1, function () {
        writeUint32(writer, 65535);
        writeUint32(writer, 65535);
        // TODO: use always 4 instead ?
        var channels = psd.channels || 0;
        for (var i = 0; i < channels; i++) {
            writeUint32(writer, 65535);
            writeUint32(writer, 65535);
        }
    });
}
function writeLayerChannelImageData(writer, _a) {
    var channels = _a.channels;
    for (var _i = 0, channels_2 = channels; _i < channels_2.length; _i++) {
        var channel = channels_2[_i];
        writeUint16(writer, channel.compression);
        if (channel.buffer) {
            writeBuffer(writer, channel.buffer);
        }
    }
}
function writeGlobalLayerMaskInfo(writer) {
    writeSection(writer, 1, function () {
        // TODO: implement
    });
}
function writeAdditionalLayerInfo(writer, target) {
    var _loop_2 = function (handler) {
        if (handler.has(target)) {
            writeSignature(writer, '8BIM');
            writeSignature(writer, handler.key);
            writeSection(writer, 4, function () { return handler.write(writer, target); });
        }
    };
    for (var _i = 0, _a = additionalInfo_1.getHandlers(); _i < _a.length; _i++) {
        var handler = _a[_i];
        _loop_2(handler);
    }
}
function writeImageData(tempBuffer, writer, globalAlpha, width, height, imageData) {
    var channels = globalAlpha ? [0, 1, 2, 3] : [0, 1, 2];
    var data = imageData || {
        data: new Uint8Array(4 * width * height),
        width: width,
        height: height,
    };
    writeUint16(writer, 1 /* RleCompressed */);
    writeBytes(writer, helpers_1.writeDataRLE(tempBuffer, data, width, height, channels));
}
function addChildren(layers, children) {
    if (!children)
        return;
    for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {
        var c = children_1[_i];
        if (c.children && c.canvas) {
            throw new Error("Invalid layer: cannot have both 'canvas' and 'children' properties set");
        }
        if (c.children) {
            var sectionDivider = {
                type: c.opened === false ? 2 /* ClosedFolder */ : 1 /* OpenFolder */,
                key: 'pass',
                subtype: 0,
            };
            layers.push({
                name: '</Layer group>',
                sectionDivider: {
                    type: 3 /* BoundingSectionDivider */,
                },
            });
            addChildren(layers, c.children);
            layers.push(__assign({}, c, { sectionDivider: sectionDivider }));
        }
        else {
            layers.push(__assign({}, c));
        }
    }
}
function resizeBuffer(writer, size) {
    var newLength = writer.buffer.byteLength;
    do {
        newLength *= 2;
    } while (size > newLength);
    var newBuffer = new ArrayBuffer(newLength);
    var newBytes = new Uint8Array(newBuffer);
    var oldBytes = new Uint8Array(writer.buffer);
    newBytes.set(oldBytes);
    writer.buffer = newBuffer;
    writer.view = new DataView(writer.buffer);
}
function ensureSize(writer, size) {
    if (size > writer.buffer.byteLength) {
        resizeBuffer(writer, size);
    }
}
function addSize(writer, size) {
    var offset = writer.offset;
    ensureSize(writer, writer.offset += size);
    return offset;
}
function createThumbnail(psd) {
    var canvas = helpers_1.createCanvas(10, 10);
    var scale = 1;
    if (psd.width > psd.height) {
        canvas.width = 160;
        canvas.height = Math.floor(psd.height * (canvas.width / psd.width));
        scale = canvas.width / psd.width;
    }
    else {
        canvas.height = 160;
        canvas.width = Math.floor(psd.width * (canvas.height / psd.height));
        scale = canvas.height / psd.height;
    }
    var context = canvas.getContext('2d');
    context.scale(scale, scale);
    if (psd.canvas) {
        context.drawImage(psd.canvas, 0, 0);
    }
    return canvas;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
