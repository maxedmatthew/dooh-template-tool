"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var base64_js_1 = require("base64-js");
var psdReader_1 = require("./psdReader");
var psdWriter_1 = require("./psdWriter");
var helpers_1 = require("./helpers");
var handlers = [];
var handlersMap = {};
function addHandler(key, has, read, write) {
    var handler = { key: key, has: has, read: read, write: write };
    handlers.push(handler);
    handlersMap[handler.key] = handler;
}
function getHandler(key, _name) {
    return handlersMap[key];
}
exports.getHandler = getHandler;
function getHandlers() {
    return handlers;
}
exports.getHandlers = getHandlers;
// 32-bit fixed-point number 16.16
function readFixedPoint32(reader) {
    return psdReader_1.readUint32(reader) / (1 << 16);
}
// 32-bit fixed-point number 16.16
function writeFixedPoint32(writer, value) {
    psdWriter_1.writeUint32(writer, value * (1 << 16));
}
var RESOLUTION_UNITS = [undefined, 'PPI', 'PPCM'];
var MEASUREMENT_UNITS = [undefined, 'Inches', 'Centimeters', 'Points', 'Picas', 'Columns'];
var hex = '0123456789abcdef';
function charToNibble(code) {
    return code <= 57 ? code - 48 : code - 87;
}
function byteAt(value, index) {
    return (charToNibble(value.charCodeAt(index)) << 4) | charToNibble(value.charCodeAt(index + 1));
}
addHandler(1061, function (target) { return target.captionDigest !== undefined; }, function (reader, target) {
    var captionDigest = '';
    for (var i = 0; i < 16; i++) {
        var byte = psdReader_1.readUint8(reader);
        captionDigest += hex[byte >> 4];
        captionDigest += hex[byte & 0xf];
    }
    target.captionDigest = captionDigest;
}, function (writer, target) {
    for (var i = 0; i < 16; i++) {
        psdWriter_1.writeUint8(writer, byteAt(target.captionDigest, i * 2));
    }
});
// addHandler(
// 	1060,
// 	target => target.xmpMetadata !== undefined,
// 	(reader, target, left) => {
// 		target.xmpMetadata = readUtf8String(reader, left());
// 	},
// 	(writer, target) => {
// 		writeUtf8String(writer, target.xmpMetadata!);
// 	},
// );
// addHandler(
// 	1082,
// 	target => target.printInformation !== undefined,
// 	(reader, target) => {
// 		const descriptorVersion = readInt32(reader);
// 		if (descriptorVersion !== 16) {
// 			throw new Error(`Invalid descriptor version`);
// 		}
// 		const value = readDescriptorStructure(reader);
// 		target.printInformation = {
// 			printerName: value.printerName,
// 		};
// 	},
// 	(writer, target) => {
// 		const value = target.printInformation!;
// 		writeInt32(writer, 16); // descriptor version
// 		writeDescriptorStructure(writer, '', 'printOutput', {
// 			PstS: true,
// 			Inte: 'Inte.Clrm',
// 			printSixteenBit: false,
// 			printerName: value.printerName || '',
// 			printProofSetup: {
// 				Bltn: 'builtinProof.proofCMYK',
// 			},
// 		});
// 	},
// );
// addHandler(
// 	1083,
// 	target => !!target,
// 	(reader, target, left) => {
// 		__data[1083] = readBytes(reader, left()); target;
// 	},
// 	(writer, target) => {
// 		writeBytes(writer, __data[1083]); target;
// 	},
// );
addHandler(1005, function (target) { return target.resolutionInfo !== undefined; }, function (reader, target) {
    var horizontalResolution = readFixedPoint32(reader);
    var horizontalResolutionUnit = psdReader_1.readUint16(reader);
    var widthUnit = psdReader_1.readUint16(reader);
    var verticalResolution = readFixedPoint32(reader);
    var verticalResolutionUnit = psdReader_1.readUint16(reader);
    var heightUnit = psdReader_1.readUint16(reader);
    target.resolutionInfo = {
        horizontalResolution: horizontalResolution,
        horizontalResolutionUnit: RESOLUTION_UNITS[horizontalResolutionUnit] || 'PPI',
        widthUnit: MEASUREMENT_UNITS[widthUnit] || 'Inches',
        verticalResolution: verticalResolution,
        verticalResolutionUnit: RESOLUTION_UNITS[verticalResolutionUnit] || 'PPI',
        heightUnit: MEASUREMENT_UNITS[heightUnit] || 'Inches',
    };
}, function (writer, target) {
    var info = target.resolutionInfo;
    writeFixedPoint32(writer, info.horizontalResolution || 0);
    psdWriter_1.writeUint16(writer, Math.max(1, RESOLUTION_UNITS.indexOf(info.horizontalResolutionUnit)));
    psdWriter_1.writeUint16(writer, Math.max(1, MEASUREMENT_UNITS.indexOf(info.widthUnit)));
    writeFixedPoint32(writer, info.verticalResolution || 0);
    psdWriter_1.writeUint16(writer, Math.max(1, RESOLUTION_UNITS.indexOf(info.verticalResolutionUnit)));
    psdWriter_1.writeUint16(writer, Math.max(1, MEASUREMENT_UNITS.indexOf(info.heightUnit)));
});
var printScaleStyles = ['centered', 'size to fit', 'user defined'];
addHandler(1062, function (target) { return target.printScale !== undefined; }, function (reader, target) {
    target.printScale = {
        style: printScaleStyles[psdReader_1.readInt16(reader)],
        x: psdReader_1.readFloat32(reader),
        y: psdReader_1.readFloat32(reader),
        scale: psdReader_1.readFloat32(reader),
    };
}, function (writer, target) {
    var _a = target.printScale, style = _a.style, x = _a.x, y = _a.y, scale = _a.scale;
    psdWriter_1.writeInt16(writer, Math.max(0, printScaleStyles.indexOf(style)));
    psdWriter_1.writeFloat32(writer, x || 0);
    psdWriter_1.writeFloat32(writer, y || 0);
    psdWriter_1.writeFloat32(writer, scale || 0);
});
addHandler(1006, function (target) { return target.alphaChannelNames !== undefined; }, function (reader, target, left) {
    target.alphaChannelNames = [];
    while (left()) {
        target.alphaChannelNames.push(psdReader_1.readPascalString(reader, 1));
    }
}, function (writer, target) {
    for (var _i = 0, _a = target.alphaChannelNames; _i < _a.length; _i++) {
        var name_1 = _a[_i];
        psdWriter_1.writePascalString(writer, name_1);
    }
});
addHandler(1037, function (target) { return target.globalAngle !== undefined; }, function (reader, target) {
    target.globalAngle = psdReader_1.readUint32(reader);
}, function (writer, target) {
    psdWriter_1.writeUint32(writer, target.globalAngle);
});
addHandler(1049, function (target) { return target.globalAltitude !== undefined; }, function (reader, target) {
    target.globalAltitude = psdReader_1.readUint32(reader);
}, function (writer, target) {
    psdWriter_1.writeUint32(writer, target.globalAltitude);
});
// addHandler(
// 	1011,
// 	target => !!target,
// 	(reader, target, left) => {
// 		__data[1011] = readBytes(reader, left()); target;
// 	},
// 	(writer, target) => {
// 		writeBytes(writer, __data[1011]); target;
// 	},
// );
// addHandler(
// 	10000,
// 	target => !!target,
// 	(reader, target, left) => {
// 		__data[10000] = readBytes(reader, left()); target;
// 	},
// 	(writer, target) => {
// 		writeBytes(writer, __data[10000]); target;
// 	},
// );
// addHandler(
// 	1013,
// 	target => !!target,
// 	(reader, target, left) => {
// 		__data[1013] = readBytes(reader, left()); target;
// 	},
// 	(writer, target) => {
// 		writeBytes(writer, __data[1013]); target;
// 	},
// );
// addHandler(
// 	1016,
// 	target => !!target,
// 	(reader, target, left) => {
// 		__data[1016] = readBytes(reader, left()); target;
// 	},
// 	(writer, target) => {
// 		writeBytes(writer, __data[1016]); target;
// 	},
// );
addHandler(1024, function (target) { return target.layerState !== undefined; }, function (reader, target) {
    target.layerState = psdReader_1.readUint16(reader);
}, function (writer, target) {
    psdWriter_1.writeUint16(writer, target.layerState);
});
addHandler(1026, function (target) { return target.layersGroup !== undefined; }, function (reader, target, left) {
    target.layersGroup = [];
    while (left()) {
        target.layersGroup.push(psdReader_1.readUint16(reader));
    }
}, function (writer, target) {
    for (var _i = 0, _a = target.layersGroup; _i < _a.length; _i++) {
        var g = _a[_i];
        psdWriter_1.writeUint16(writer, g);
    }
});
addHandler(1072, function (target) { return target.layerGroupsEnabledId !== undefined; }, function (reader, target, left) {
    target.layerGroupsEnabledId = [];
    while (left()) {
        target.layerGroupsEnabledId.push(psdReader_1.readUint8(reader));
    }
}, function (writer, target) {
    for (var _i = 0, _a = target.layerGroupsEnabledId; _i < _a.length; _i++) {
        var id = _a[_i];
        psdWriter_1.writeUint8(writer, id);
    }
});
addHandler(1069, function (target) { return target.layerSelectionIds !== undefined; }, function (reader, target) {
    var count = psdReader_1.readUint16(reader);
    target.layerSelectionIds = [];
    while (count--) {
        target.layerSelectionIds.push(psdReader_1.readUint32(reader));
    }
}, function (writer, target) {
    psdWriter_1.writeUint16(writer, target.layerSelectionIds.length);
    for (var _i = 0, _a = target.layerSelectionIds; _i < _a.length; _i++) {
        var id = _a[_i];
        psdWriter_1.writeUint32(writer, id);
    }
});
addHandler(1032, function (target) { return target.gridAndGuidesInformation !== undefined; }, function (reader, target) {
    target.gridAndGuidesInformation = {
        version: psdReader_1.readUint32(reader),
        grid: {
            horizontal: psdReader_1.readUint32(reader),
            vertical: psdReader_1.readUint32(reader),
        },
        guides: [],
    };
    var count = psdReader_1.readUint32(reader);
    while (count--) {
        target.gridAndGuidesInformation.guides.push({
            location: psdReader_1.readUint32(reader) / 32,
            direction: psdReader_1.readUint8(reader) ? 'horizontal' : 'vertical'
        });
    }
}, function (writer, target) {
    var info = target.gridAndGuidesInformation;
    var version = info.version || 1;
    var grid = info.grid || { horizontal: 18 * 32, vertical: 18 * 32 };
    var guides = info.guides || [];
    psdWriter_1.writeUint32(writer, version);
    psdWriter_1.writeUint32(writer, grid.horizontal);
    psdWriter_1.writeUint32(writer, grid.vertical);
    psdWriter_1.writeUint32(writer, guides.length);
    guides.forEach(function (g) {
        psdWriter_1.writeUint32(writer, g.location * 32);
        psdWriter_1.writeUint8(writer, g.direction === 'horizontal' ? 1 : 0);
    });
});
addHandler(1045, function (target) { return target.unicodeAlphaNames !== undefined; }, function (reader, target, left) {
    target.unicodeAlphaNames = [];
    while (left()) {
        target.unicodeAlphaNames.push(psdReader_1.readUnicodeString(reader));
    }
}, function (writer, target) {
    for (var _i = 0, _a = target.unicodeAlphaNames; _i < _a.length; _i++) {
        var name_2 = _a[_i];
        psdWriter_1.writeUnicodeString(writer, name_2);
    }
});
addHandler(1053, function (target) { return target.alphaIdentifiers !== undefined; }, function (reader, target, left) {
    target.alphaIdentifiers = [];
    while (left() >= 4) {
        target.alphaIdentifiers.push(psdReader_1.readUint32(reader));
    }
}, function (writer, target) {
    for (var _i = 0, _a = target.alphaIdentifiers; _i < _a.length; _i++) {
        var id = _a[_i];
        psdWriter_1.writeUint32(writer, id);
    }
});
addHandler(1054, function (target) { return target.urlsList !== undefined; }, function (reader, target, _, options) {
    var count = psdReader_1.readUint32(reader);
    if (count) {
        if (!options.throwForMissingFeatures)
            return;
        throw new Error('Not implemented: URL List');
    }
    target.urlsList = [];
}, function (writer, target) {
    psdWriter_1.writeUint32(writer, target.urlsList.length);
    if (target.urlsList.length)
        throw new Error('Not implemented: URL List');
});
// addHandler(
// 	1050,
// 	target => !!target,
// 	(reader, target, left) => {
// 		__data[1050] = readBytes(reader, left()); target;
// 	},
// 	(writer, target) => {
// 		writeBytes(writer, __data[1050]); target;
// 	},
// );
addHandler(1064, function (target) { return target.pixelAspectRatio !== undefined; }, function (reader, target) {
    target.pixelAspectRatio = {
        version: psdReader_1.readUint32(reader),
        aspect: psdReader_1.readFloat64(reader),
    };
}, function (writer, target) {
    psdWriter_1.writeUint32(writer, target.pixelAspectRatio.version);
    psdWriter_1.writeFloat64(writer, target.pixelAspectRatio.aspect);
});
// addHandler(
// 	1039,
// 	target => !!target,
// 	(reader, target, left) => {
// 		__data[1039] = readBytes(reader, left()); target;
// 	},
// 	(writer, target) => {
// 		writeBytes(writer, __data[1039]); target;
// 	},
// );
// addHandler(
// 	1044,
// 	target => !!target,
// 	(reader, target, left) => {
// 		__data[1044] = readBytes(reader, left()); target;
// 	},
// 	(writer, target) => {
// 		writeBytes(writer, __data[1044]); target;
// 	},
// );
addHandler(1036, function (target) { return target.thumbnail !== undefined; }, function (reader, target, left) {
    var format = psdReader_1.readUint32(reader); // 1 = kJpegRGB, 0 = kRawRGB
    var width = psdReader_1.readUint32(reader);
    var height = psdReader_1.readUint32(reader);
    var widthBytes = psdReader_1.readUint32(reader); // = (width * bits_per_pixel + 31) / 32 * 4.
    var totalSize = psdReader_1.readUint32(reader); // = widthBytes * height * planes
    var sizeAfterCompression = psdReader_1.readUint32(reader);
    var bitsPerPixel = psdReader_1.readUint16(reader); // 24
    var planes = psdReader_1.readUint16(reader); // 1
    if (format !== 1 || bitsPerPixel !== 24 || planes !== 1) {
        console.log("invalid thumbnail data (format: " + format + ", bitsPerPixel: " + bitsPerPixel + ", planes: " + planes + ")");
        psdReader_1.skipBytes(reader, left());
        return;
    }
    width;
    height;
    widthBytes;
    totalSize;
    sizeAfterCompression;
    var size = left();
    var bytes = psdReader_1.readBytes(reader, size);
    target.thumbnail = helpers_1.createCanvasFromData(bytes);
}, function (writer, target) {
    var thumb = target.thumbnail;
    var data = base64_js_1.toByteArray(thumb.toDataURL('image/jpeg', 1).substr('data:image/jpeg;base64,'.length));
    var bitsPerPixel = 24;
    var widthBytes = (thumb.width * bitsPerPixel + 31) / 32 * 4;
    var planes = 1;
    var totalSize = widthBytes * thumb.height * planes;
    var sizeAfterCompression = data.length;
    psdWriter_1.writeUint32(writer, 1); // 1 = kJpegRGB
    psdWriter_1.writeUint32(writer, thumb.width);
    psdWriter_1.writeUint32(writer, thumb.height);
    psdWriter_1.writeUint32(writer, widthBytes);
    psdWriter_1.writeUint32(writer, totalSize);
    psdWriter_1.writeUint32(writer, sizeAfterCompression);
    psdWriter_1.writeUint16(writer, bitsPerPixel);
    psdWriter_1.writeUint16(writer, planes);
    psdWriter_1.writeBytes(writer, data);
});
addHandler(1057, function (target) { return target.versionInfo !== undefined; }, function (reader, target, left) {
    target.versionInfo = {
        version: psdReader_1.readUint32(reader),
        hasRealMergedData: !!psdReader_1.readUint8(reader),
        writerName: psdReader_1.readUnicodeString(reader),
        readerName: psdReader_1.readUnicodeString(reader),
        fileVersion: psdReader_1.readUint32(reader),
    };
    psdReader_1.skipBytes(reader, left());
}, function (writer, target) {
    var versionInfo = target.versionInfo;
    psdWriter_1.writeUint32(writer, versionInfo.version);
    psdWriter_1.writeUint8(writer, versionInfo.hasRealMergedData ? 1 : 0);
    psdWriter_1.writeUnicodeString(writer, versionInfo.writerName);
    psdWriter_1.writeUnicodeString(writer, versionInfo.readerName);
    psdWriter_1.writeUint32(writer, versionInfo.fileVersion);
});
// addHandler(
// 	1058,
// 	target => !!target,
// 	(reader, target, left) => {
// 		__data[1058] = readBytes(reader, left()); target;
// 	},
// 	(writer, target) => {
// 		writeBytes(writer, __data[1058]); target;
// 	},
// );

//# sourceMappingURL=data:application/json;charset=utf8;base64,
