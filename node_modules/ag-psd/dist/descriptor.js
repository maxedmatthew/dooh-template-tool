"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var psdReader_1 = require("./psdReader");
var psdWriter_1 = require("./psdWriter");
function readAsciiStringOrClassId(reader) {
    var length = psdReader_1.readInt32(reader);
    var result = length === 0 ? psdReader_1.readSignature(reader) : psdReader_1.readAsciiString(reader, length);
    return result;
}
function writeAsciiString(writer, value) {
    psdWriter_1.writeInt32(writer, value.length);
    for (var i = 0; i < value.length; i++) {
        psdWriter_1.writeUint8(writer, value.charCodeAt(i));
    }
}
function writeClassId(writer, value) {
    psdWriter_1.writeInt32(writer, 0);
    psdWriter_1.writeSignature(writer, value);
}
function writeAsciiStringOrClassId(writer, value) {
    if (value.length === 4) {
        writeClassId(writer, value);
    }
    else {
        writeAsciiString(writer, value);
    }
}
function readDescriptorStructure(reader) {
    readClassStructure(reader);
    var itemsCount = psdReader_1.readUint32(reader);
    var object = {};
    for (var i = 0; i < itemsCount; i++) {
        var key = readAsciiStringOrClassId(reader);
        var type = psdReader_1.readSignature(reader);
        var data = readOSType(reader, type);
        // console.log('>', `"${key}"`, type);
        object[key] = data;
    }
    return object;
}
exports.readDescriptorStructure = readDescriptorStructure;
var fieldToType = {
    'Txt ': 'TEXT',
    textGridding: 'enum',
    Ornt: 'enum',
    AntA: 'enum',
    TextIndex: 'long',
    warpStyle: 'enum',
    warpValue: 'doub',
    warpPerspective: 'doub',
    warpPerspectiveOther: 'doub',
    warpRotate: 'enum',
    EngineData: 'tdta',
    PstS: 'bool',
    Inte: 'enum',
    printSixteenBit: 'bool',
    printerName: 'TEXT',
    printProofSetup: 'Objc',
    Bltn: 'enum',
};
var fieldToExtType = {
    printProofSetup: { name: 'Proof Setup', classId: 'proofSetup' },
};
function writeDescriptorStructure(writer, name, classId, value) {
    writeClassStructure(writer, name, classId);
    var keys = Object.keys(value);
    psdWriter_1.writeUint32(writer, keys.length);
    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {
        var key = keys_1[_i];
        var type = fieldToType[key];
        writeAsciiStringOrClassId(writer, key);
        psdWriter_1.writeSignature(writer, type || 'long');
        writeOSType(writer, type || 'long', value[key], fieldToExtType[key]);
        if (!type) {
            console.log('missing descriptor field type for', key);
        }
    }
}
exports.writeDescriptorStructure = writeDescriptorStructure;
function readOSType(reader, type) {
    switch (type) {
        case 'obj ': // Reference
            return readReferenceStructure(reader);
        case 'Objc': // Descriptor
        case 'GlbO': // GlobalObject same as Descriptor
            return readDescriptorStructure(reader);
        case 'VlLs': // List
            return readListStructure(reader);
        case 'doub': // Double
            return psdReader_1.readFloat64(reader);
        case 'UntF': // Unit double
            return readUnitDoubleStructure(reader);
        case 'UnFl': // Unit float
            return readUnitFloatStructure(reader);
        case 'TEXT': // String
            return psdReader_1.readUnicodeString(reader);
        case 'enum': // Enumerated
            return readEnumerated(reader);
        case 'long': // Integer
            return psdReader_1.readInt32(reader);
        case 'comp': // Large Integer
            return readLargeInteger(reader);
        case 'bool': // Boolean
            return !!psdReader_1.readUint8(reader);
        case 'type': // Class
        case 'GlbC': // Class
            return readClassStructure(reader);
        case 'alis': // Alias
            return readAliasStructure(reader);
        case 'tdta': // Raw Data
            return readRawData(reader);
        case 'ObAr': // Object array
            throw new Error('not implemented: ObAr');
        case 'Pth ': // File path
            return readFilePath(reader);
        default:
            throw new Error("Invalid TySh descriptor OSType: " + type + " at " + reader.offset.toString(16));
    }
}
function writeOSType(writer, type, value, extType) {
    switch (type) {
        // case 'obj ': // Reference
        // 	return readReferenceStructure(reader);
        case 'Objc': // Descriptor
            // case 'GlbO': // GlobalObject same as Descriptor
            writeDescriptorStructure(writer, extType.name, extType.classId, value);
            break;
        // case 'VlLs': // List
        // 	return readListStructure(reader);
        case 'doub': // Double
            psdWriter_1.writeFloat64(writer, value);
            break;
        // case 'UntF': // Unit double
        // 	return readUnitDoubleStructure(reader);
        // case 'UnFl': // Unit float
        // 	return readUnitFloatStructure(reader);
        case 'TEXT': // String
            psdWriter_1.writeUnicodeStringWithPadding(writer, value);
            break;
        case 'enum': // Enumerated
            writeEnumerated(writer, value);
            break;
        case 'long': // Integer
            psdWriter_1.writeInt32(writer, value);
            break;
        // case 'comp': // Large Integer
        // 	return readLargeInteger(reader);
        case 'bool': // Boolean
            psdWriter_1.writeUint8(writer, value ? 1 : 0);
            break;
        // case 'type': // Class
        // case 'GlbC': // Class
        // 	return readClassStructure(reader);
        // case 'alis': // Alias
        // 	return readAliasStructure(reader);
        case 'tdta': // Raw Data
            writeRawData(writer, value);
            break;
        // case 'ObAr': // Object array
        // 	throw new Error('not implemented: ObAr');
        // case 'Pth ': // File path
        // 	return readFilePath(reader);
        default:
            throw new Error("Not implemented TySh descriptor OSType: " + type);
    }
}
function readReferenceStructure(reader) {
    var itemsCount = psdReader_1.readInt32(reader);
    var items = [];
    for (var i = 0; i < itemsCount; i++) {
        var type = psdReader_1.readSignature(reader);
        switch (type) {
            case 'prop': // Property
                items.push(readPropertyStructure(reader));
                break;
            case 'Clss': // Class
                items.push(readClassStructure(reader));
                break;
            case 'Enmr': // Enumerated Reference
                items.push(readEnumeratedReference(reader));
                break;
            case 'rele': // Offset
                items.push(readOffsetStructure(reader));
                break;
            case 'Idnt': // Identifier
                items.push(psdReader_1.readInt32(reader));
                break;
            case 'indx': // Index
                items.push(psdReader_1.readInt32(reader));
                break;
            case 'name': // Name
                items.push(psdReader_1.readUnicodeString(reader));
                break;
            default:
                throw new Error("Invalid TySh descriptor Reference type: " + type);
        }
    }
    return items;
}
function readPropertyStructure(reader) {
    var _a = readClassStructure(reader), name = _a.name, classID = _a.classID;
    var keyID = readAsciiStringOrClassId(reader);
    return { name: name, classID: classID, keyID: keyID };
}
var unitsMap = {
    '#Ang': 'Angle',
    '#Rsl': 'Density',
    '#Rlt': 'Distance',
    '#Nne': 'None',
    '#Prc': 'Percent',
    '#Pxl': 'Pixels',
    '#Mlm': 'Millimeters',
    '#Pnt': 'Points',
};
function readUnitDoubleStructure(reader) {
    var units = psdReader_1.readSignature(reader);
    var value = psdReader_1.readFloat64(reader);
    return { units: unitsMap[units], value: value };
}
function readUnitFloatStructure(reader) {
    var units = psdReader_1.readSignature(reader);
    var value = psdReader_1.readFloat32(reader);
    return { units: unitsMap[units], value: value };
}
function readClassStructure(reader) {
    var name = psdReader_1.readUnicodeString(reader);
    var classID = readAsciiStringOrClassId(reader);
    return { name: name, classID: classID };
}
function writeClassStructure(writer, name, classID) {
    psdWriter_1.writeUnicodeStringWithPadding(writer, name);
    writeAsciiStringOrClassId(writer, classID);
}
function readEnumeratedReference(reader) {
    var _a = readClassStructure(reader), name = _a.name, classID = _a.classID;
    var TypeID = readAsciiStringOrClassId(reader);
    var value = readAsciiStringOrClassId(reader);
    return { name: name, classID: classID, TypeID: TypeID, value: value };
}
function readOffsetStructure(reader) {
    var _a = readClassStructure(reader), name = _a.name, classID = _a.classID;
    var value = psdReader_1.readUint32(reader);
    return { name: name, classID: classID, value: value };
}
function readAliasStructure(reader) {
    var length = psdReader_1.readInt32(reader);
    return psdReader_1.readAsciiString(reader, length);
}
function readListStructure(reader) {
    var length = psdReader_1.readInt32(reader);
    var type = psdReader_1.readSignature(reader);
    var items = [];
    for (var i = 0; i < length; i++) {
        items.push(readOSType(reader, type));
    }
    return items;
}
function readLargeInteger(reader) {
    var low = psdReader_1.readUint32(reader);
    var high = psdReader_1.readUint32(reader);
    return { low: low, high: high };
}
function readEnumerated(reader) {
    var type = readAsciiStringOrClassId(reader);
    var value = readAsciiStringOrClassId(reader);
    return type + "." + value;
}
function writeEnumerated(writer, full) {
    var _a = full.split('.'), type = _a[0], value = _a[1];
    writeAsciiStringOrClassId(writer, type);
    writeAsciiStringOrClassId(writer, value);
}
function readRawData(reader) {
    var length = psdReader_1.readInt32(reader);
    return psdReader_1.readBytes(reader, length);
}
function writeRawData(writer, value) {
    psdWriter_1.writeInt32(writer, value.byteLength);
    psdWriter_1.writeBytes(writer, value);
}
function readFilePath(reader) {
    var length = psdReader_1.readInt32(reader);
    var sig = psdReader_1.readSignature(reader);
    var pathSize = psdReader_1.readInt32LE(reader);
    var charsCount = psdReader_1.readInt32LE(reader);
    var path = psdReader_1.readUnicodeStringWithLength(reader, charsCount);
    length;
    pathSize;
    return { sig: sig, path: path };
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
