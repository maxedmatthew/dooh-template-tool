{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar psdReader_1 = require(\"./psdReader\");\n\nvar psdWriter_1 = require(\"./psdWriter\");\n\nfunction readAsciiStringOrClassId(reader) {\n  var length = psdReader_1.readInt32(reader);\n  var result = length === 0 ? psdReader_1.readSignature(reader) : psdReader_1.readAsciiString(reader, length);\n  return result;\n}\n\nfunction writeAsciiString(writer, value) {\n  psdWriter_1.writeInt32(writer, value.length);\n\n  for (var i = 0; i < value.length; i++) {\n    psdWriter_1.writeUint8(writer, value.charCodeAt(i));\n  }\n}\n\nfunction writeClassId(writer, value) {\n  psdWriter_1.writeInt32(writer, 0);\n  psdWriter_1.writeSignature(writer, value);\n}\n\nfunction writeAsciiStringOrClassId(writer, value) {\n  if (value.length === 4) {\n    writeClassId(writer, value);\n  } else {\n    writeAsciiString(writer, value);\n  }\n}\n\nfunction readDescriptorStructure(reader) {\n  readClassStructure(reader);\n  var itemsCount = psdReader_1.readUint32(reader);\n  var object = {};\n\n  for (var i = 0; i < itemsCount; i++) {\n    var key = readAsciiStringOrClassId(reader);\n    var type = psdReader_1.readSignature(reader);\n    var data = readOSType(reader, type); // console.log('>', `\"${key}\"`, type);\n\n    object[key] = data;\n  }\n\n  return object;\n}\n\nexports.readDescriptorStructure = readDescriptorStructure;\nvar fieldToType = {\n  'Txt ': 'TEXT',\n  textGridding: 'enum',\n  Ornt: 'enum',\n  AntA: 'enum',\n  TextIndex: 'long',\n  warpStyle: 'enum',\n  warpValue: 'doub',\n  warpPerspective: 'doub',\n  warpPerspectiveOther: 'doub',\n  warpRotate: 'enum',\n  EngineData: 'tdta',\n  PstS: 'bool',\n  Inte: 'enum',\n  printSixteenBit: 'bool',\n  printerName: 'TEXT',\n  printProofSetup: 'Objc',\n  Bltn: 'enum'\n};\nvar fieldToExtType = {\n  printProofSetup: {\n    name: 'Proof Setup',\n    classId: 'proofSetup'\n  }\n};\n\nfunction writeDescriptorStructure(writer, name, classId, value) {\n  writeClassStructure(writer, name, classId);\n  var keys = Object.keys(value);\n  psdWriter_1.writeUint32(writer, keys.length);\n\n  for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n    var key = keys_1[_i];\n    var type = fieldToType[key];\n    writeAsciiStringOrClassId(writer, key);\n    psdWriter_1.writeSignature(writer, type || 'long');\n    writeOSType(writer, type || 'long', value[key], fieldToExtType[key]);\n\n    if (!type) {\n      console.log('missing descriptor field type for', key);\n    }\n  }\n}\n\nexports.writeDescriptorStructure = writeDescriptorStructure;\n\nfunction readOSType(reader, type) {\n  switch (type) {\n    case 'obj ':\n      // Reference\n      return readReferenceStructure(reader);\n\n    case 'Objc': // Descriptor\n\n    case 'GlbO':\n      // GlobalObject same as Descriptor\n      return readDescriptorStructure(reader);\n\n    case 'VlLs':\n      // List\n      return readListStructure(reader);\n\n    case 'doub':\n      // Double\n      return psdReader_1.readFloat64(reader);\n\n    case 'UntF':\n      // Unit double\n      return readUnitDoubleStructure(reader);\n\n    case 'UnFl':\n      // Unit float\n      return readUnitFloatStructure(reader);\n\n    case 'TEXT':\n      // String\n      return psdReader_1.readUnicodeString(reader);\n\n    case 'enum':\n      // Enumerated\n      return readEnumerated(reader);\n\n    case 'long':\n      // Integer\n      return psdReader_1.readInt32(reader);\n\n    case 'comp':\n      // Large Integer\n      return readLargeInteger(reader);\n\n    case 'bool':\n      // Boolean\n      return !!psdReader_1.readUint8(reader);\n\n    case 'type': // Class\n\n    case 'GlbC':\n      // Class\n      return readClassStructure(reader);\n\n    case 'alis':\n      // Alias\n      return readAliasStructure(reader);\n\n    case 'tdta':\n      // Raw Data\n      return readRawData(reader);\n\n    case 'ObAr':\n      // Object array\n      throw new Error('not implemented: ObAr');\n\n    case 'Pth ':\n      // File path\n      return readFilePath(reader);\n\n    default:\n      throw new Error(\"Invalid TySh descriptor OSType: \" + type + \" at \" + reader.offset.toString(16));\n  }\n}\n\nfunction writeOSType(writer, type, value, extType) {\n  switch (type) {\n    // case 'obj ': // Reference\n    // \treturn readReferenceStructure(reader);\n    case 'Objc':\n      // Descriptor\n      // case 'GlbO': // GlobalObject same as Descriptor\n      writeDescriptorStructure(writer, extType.name, extType.classId, value);\n      break;\n    // case 'VlLs': // List\n    // \treturn readListStructure(reader);\n\n    case 'doub':\n      // Double\n      psdWriter_1.writeFloat64(writer, value);\n      break;\n    // case 'UntF': // Unit double\n    // \treturn readUnitDoubleStructure(reader);\n    // case 'UnFl': // Unit float\n    // \treturn readUnitFloatStructure(reader);\n\n    case 'TEXT':\n      // String\n      psdWriter_1.writeUnicodeStringWithPadding(writer, value);\n      break;\n\n    case 'enum':\n      // Enumerated\n      writeEnumerated(writer, value);\n      break;\n\n    case 'long':\n      // Integer\n      psdWriter_1.writeInt32(writer, value);\n      break;\n    // case 'comp': // Large Integer\n    // \treturn readLargeInteger(reader);\n\n    case 'bool':\n      // Boolean\n      psdWriter_1.writeUint8(writer, value ? 1 : 0);\n      break;\n    // case 'type': // Class\n    // case 'GlbC': // Class\n    // \treturn readClassStructure(reader);\n    // case 'alis': // Alias\n    // \treturn readAliasStructure(reader);\n\n    case 'tdta':\n      // Raw Data\n      writeRawData(writer, value);\n      break;\n    // case 'ObAr': // Object array\n    // \tthrow new Error('not implemented: ObAr');\n    // case 'Pth ': // File path\n    // \treturn readFilePath(reader);\n\n    default:\n      throw new Error(\"Not implemented TySh descriptor OSType: \" + type);\n  }\n}\n\nfunction readReferenceStructure(reader) {\n  var itemsCount = psdReader_1.readInt32(reader);\n  var items = [];\n\n  for (var i = 0; i < itemsCount; i++) {\n    var type = psdReader_1.readSignature(reader);\n\n    switch (type) {\n      case 'prop':\n        // Property\n        items.push(readPropertyStructure(reader));\n        break;\n\n      case 'Clss':\n        // Class\n        items.push(readClassStructure(reader));\n        break;\n\n      case 'Enmr':\n        // Enumerated Reference\n        items.push(readEnumeratedReference(reader));\n        break;\n\n      case 'rele':\n        // Offset\n        items.push(readOffsetStructure(reader));\n        break;\n\n      case 'Idnt':\n        // Identifier\n        items.push(psdReader_1.readInt32(reader));\n        break;\n\n      case 'indx':\n        // Index\n        items.push(psdReader_1.readInt32(reader));\n        break;\n\n      case 'name':\n        // Name\n        items.push(psdReader_1.readUnicodeString(reader));\n        break;\n\n      default:\n        throw new Error(\"Invalid TySh descriptor Reference type: \" + type);\n    }\n  }\n\n  return items;\n}\n\nfunction readPropertyStructure(reader) {\n  var _a = readClassStructure(reader),\n      name = _a.name,\n      classID = _a.classID;\n\n  var keyID = readAsciiStringOrClassId(reader);\n  return {\n    name: name,\n    classID: classID,\n    keyID: keyID\n  };\n}\n\nvar unitsMap = {\n  '#Ang': 'Angle',\n  '#Rsl': 'Density',\n  '#Rlt': 'Distance',\n  '#Nne': 'None',\n  '#Prc': 'Percent',\n  '#Pxl': 'Pixels',\n  '#Mlm': 'Millimeters',\n  '#Pnt': 'Points'\n};\n\nfunction readUnitDoubleStructure(reader) {\n  var units = psdReader_1.readSignature(reader);\n  var value = psdReader_1.readFloat64(reader);\n  return {\n    units: unitsMap[units],\n    value: value\n  };\n}\n\nfunction readUnitFloatStructure(reader) {\n  var units = psdReader_1.readSignature(reader);\n  var value = psdReader_1.readFloat32(reader);\n  return {\n    units: unitsMap[units],\n    value: value\n  };\n}\n\nfunction readClassStructure(reader) {\n  var name = psdReader_1.readUnicodeString(reader);\n  var classID = readAsciiStringOrClassId(reader);\n  return {\n    name: name,\n    classID: classID\n  };\n}\n\nfunction writeClassStructure(writer, name, classID) {\n  psdWriter_1.writeUnicodeStringWithPadding(writer, name);\n  writeAsciiStringOrClassId(writer, classID);\n}\n\nfunction readEnumeratedReference(reader) {\n  var _a = readClassStructure(reader),\n      name = _a.name,\n      classID = _a.classID;\n\n  var TypeID = readAsciiStringOrClassId(reader);\n  var value = readAsciiStringOrClassId(reader);\n  return {\n    name: name,\n    classID: classID,\n    TypeID: TypeID,\n    value: value\n  };\n}\n\nfunction readOffsetStructure(reader) {\n  var _a = readClassStructure(reader),\n      name = _a.name,\n      classID = _a.classID;\n\n  var value = psdReader_1.readUint32(reader);\n  return {\n    name: name,\n    classID: classID,\n    value: value\n  };\n}\n\nfunction readAliasStructure(reader) {\n  var length = psdReader_1.readInt32(reader);\n  return psdReader_1.readAsciiString(reader, length);\n}\n\nfunction readListStructure(reader) {\n  var length = psdReader_1.readInt32(reader);\n  var type = psdReader_1.readSignature(reader);\n  var items = [];\n\n  for (var i = 0; i < length; i++) {\n    items.push(readOSType(reader, type));\n  }\n\n  return items;\n}\n\nfunction readLargeInteger(reader) {\n  var low = psdReader_1.readUint32(reader);\n  var high = psdReader_1.readUint32(reader);\n  return {\n    low: low,\n    high: high\n  };\n}\n\nfunction readEnumerated(reader) {\n  var type = readAsciiStringOrClassId(reader);\n  var value = readAsciiStringOrClassId(reader);\n  return type + \".\" + value;\n}\n\nfunction writeEnumerated(writer, full) {\n  var _a = full.split('.'),\n      type = _a[0],\n      value = _a[1];\n\n  writeAsciiStringOrClassId(writer, type);\n  writeAsciiStringOrClassId(writer, value);\n}\n\nfunction readRawData(reader) {\n  var length = psdReader_1.readInt32(reader);\n  return psdReader_1.readBytes(reader, length);\n}\n\nfunction writeRawData(writer, value) {\n  psdWriter_1.writeInt32(writer, value.byteLength);\n  psdWriter_1.writeBytes(writer, value);\n}\n\nfunction readFilePath(reader) {\n  var length = psdReader_1.readInt32(reader);\n  var sig = psdReader_1.readSignature(reader);\n  var pathSize = psdReader_1.readInt32LE(reader);\n  var charsCount = psdReader_1.readInt32LE(reader);\n  var path = psdReader_1.readUnicodeStringWithLength(reader, charsCount);\n  length;\n  pathSize;\n  return {\n    sig: sig,\n    path: path\n  };\n}","map":null,"metadata":{},"sourceType":"script"}