{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fromBlendMode = {};\nexports.toBlendMode = {\n  'pass': 'pass through',\n  'norm': 'normal',\n  'diss': 'dissolve',\n  'dark': 'darken',\n  'mul ': 'multiply',\n  'idiv': 'color burn',\n  'lbrn': 'linear burn',\n  'dkCl': 'darker color',\n  'lite': 'lighten',\n  'scrn': 'screen',\n  'div ': 'color dodge',\n  'lddg': 'linear dodge',\n  'lgCl': 'lighter color',\n  'over': 'overlay',\n  'sLit': 'soft light',\n  'hLit': 'hard light',\n  'vLit': 'vivid light',\n  'lLit': 'linear light',\n  'pLit': 'pin light',\n  'hMix': 'hard mix',\n  'diff': 'difference',\n  'smud': 'exclusion',\n  'fsub': 'subtract',\n  'fdiv': 'divide',\n  'hue ': 'hue',\n  'sat ': 'saturation',\n  'colr': 'color',\n  'lum ': 'luminosity'\n};\nObject.keys(exports.toBlendMode).forEach(function (key) {\n  return exports.fromBlendMode[exports.toBlendMode[key]] = key;\n}); // export const enum ColorSpace {\n// \tRGB = 0,\n// \tHSB = 1,\n// \tCMYK = 2,\n// \tLab = 7,\n// \tGrayscale = 8,\n// }\n\nvar ColorMode;\n\n(function (ColorMode) {\n  ColorMode[ColorMode[\"Bitmap\"] = 0] = \"Bitmap\";\n  ColorMode[ColorMode[\"Grayscale\"] = 1] = \"Grayscale\";\n  ColorMode[ColorMode[\"Indexed\"] = 2] = \"Indexed\";\n  ColorMode[ColorMode[\"RGB\"] = 3] = \"RGB\";\n  ColorMode[ColorMode[\"CMYK\"] = 4] = \"CMYK\";\n  ColorMode[ColorMode[\"Multichannel\"] = 7] = \"Multichannel\";\n  ColorMode[ColorMode[\"Duotone\"] = 8] = \"Duotone\";\n  ColorMode[ColorMode[\"Lab\"] = 9] = \"Lab\";\n})(ColorMode = exports.ColorMode || (exports.ColorMode = {}));\n\nvar ChannelID;\n\n(function (ChannelID) {\n  ChannelID[ChannelID[\"Red\"] = 0] = \"Red\";\n  ChannelID[ChannelID[\"Green\"] = 1] = \"Green\";\n  ChannelID[ChannelID[\"Blue\"] = 2] = \"Blue\";\n  ChannelID[ChannelID[\"Transparency\"] = -1] = \"Transparency\";\n  ChannelID[ChannelID[\"UserMask\"] = -2] = \"UserMask\";\n  ChannelID[ChannelID[\"RealUserMask\"] = -3] = \"RealUserMask\";\n})(ChannelID = exports.ChannelID || (exports.ChannelID = {}));\n\nvar Compression;\n\n(function (Compression) {\n  Compression[Compression[\"RawData\"] = 0] = \"RawData\";\n  Compression[Compression[\"RleCompressed\"] = 1] = \"RleCompressed\";\n  Compression[Compression[\"ZipWithoutPrediction\"] = 2] = \"ZipWithoutPrediction\";\n  Compression[Compression[\"ZipWithPrediction\"] = 3] = \"ZipWithPrediction\";\n})(Compression = exports.Compression || (exports.Compression = {}));\n\nvar SectionDividerType;\n\n(function (SectionDividerType) {\n  SectionDividerType[SectionDividerType[\"Other\"] = 0] = \"Other\";\n  SectionDividerType[SectionDividerType[\"OpenFolder\"] = 1] = \"OpenFolder\";\n  SectionDividerType[SectionDividerType[\"ClosedFolder\"] = 2] = \"ClosedFolder\";\n  SectionDividerType[SectionDividerType[\"BoundingSectionDivider\"] = 3] = \"BoundingSectionDivider\";\n})(SectionDividerType = exports.SectionDividerType || (exports.SectionDividerType = {}));\n\nvar LayerMaskFlags;\n\n(function (LayerMaskFlags) {\n  LayerMaskFlags[LayerMaskFlags[\"PositionRelativeToLayer\"] = 1] = \"PositionRelativeToLayer\";\n  LayerMaskFlags[LayerMaskFlags[\"LayerMaskDisabled\"] = 2] = \"LayerMaskDisabled\";\n  LayerMaskFlags[LayerMaskFlags[\"InvertLayerMaskWhenBlending\"] = 4] = \"InvertLayerMaskWhenBlending\";\n  LayerMaskFlags[LayerMaskFlags[\"LayerMaskFromRenderingOtherData\"] = 8] = \"LayerMaskFromRenderingOtherData\";\n  LayerMaskFlags[LayerMaskFlags[\"MaskHasParametersAppliedToIt\"] = 16] = \"MaskHasParametersAppliedToIt\";\n})(LayerMaskFlags = exports.LayerMaskFlags || (exports.LayerMaskFlags = {}));\n\nvar MaskParameters;\n\n(function (MaskParameters) {\n  MaskParameters[MaskParameters[\"UserMaskDensity\"] = 1] = \"UserMaskDensity\";\n  MaskParameters[MaskParameters[\"UserMaskFeather\"] = 2] = \"UserMaskFeather\";\n  MaskParameters[MaskParameters[\"VectorMaskDensity\"] = 4] = \"VectorMaskDensity\";\n  MaskParameters[MaskParameters[\"VectorMaskFeather\"] = 8] = \"VectorMaskFeather\";\n})(MaskParameters = exports.MaskParameters || (exports.MaskParameters = {}));","map":null,"metadata":{},"sourceType":"script"}