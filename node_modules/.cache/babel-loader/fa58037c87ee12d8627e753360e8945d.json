{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar base64_js_1 = require(\"base64-js\");\n\nvar psdReader_1 = require(\"./psdReader\");\n\nvar psdWriter_1 = require(\"./psdWriter\");\n\nvar helpers_1 = require(\"./helpers\");\n\nvar handlers = [];\nvar handlersMap = {};\n\nfunction addHandler(key, has, read, write) {\n  var handler = {\n    key: key,\n    has: has,\n    read: read,\n    write: write\n  };\n  handlers.push(handler);\n  handlersMap[handler.key] = handler;\n}\n\nfunction getHandler(key, _name) {\n  return handlersMap[key];\n}\n\nexports.getHandler = getHandler;\n\nfunction getHandlers() {\n  return handlers;\n}\n\nexports.getHandlers = getHandlers; // 32-bit fixed-point number 16.16\n\nfunction readFixedPoint32(reader) {\n  return psdReader_1.readUint32(reader) / (1 << 16);\n} // 32-bit fixed-point number 16.16\n\n\nfunction writeFixedPoint32(writer, value) {\n  psdWriter_1.writeUint32(writer, value * (1 << 16));\n}\n\nvar RESOLUTION_UNITS = [undefined, 'PPI', 'PPCM'];\nvar MEASUREMENT_UNITS = [undefined, 'Inches', 'Centimeters', 'Points', 'Picas', 'Columns'];\nvar hex = '0123456789abcdef';\n\nfunction charToNibble(code) {\n  return code <= 57 ? code - 48 : code - 87;\n}\n\nfunction byteAt(value, index) {\n  return charToNibble(value.charCodeAt(index)) << 4 | charToNibble(value.charCodeAt(index + 1));\n}\n\naddHandler(1061, function (target) {\n  return target.captionDigest !== undefined;\n}, function (reader, target) {\n  var captionDigest = '';\n\n  for (var i = 0; i < 16; i++) {\n    var byte = psdReader_1.readUint8(reader);\n    captionDigest += hex[byte >> 4];\n    captionDigest += hex[byte & 0xf];\n  }\n\n  target.captionDigest = captionDigest;\n}, function (writer, target) {\n  for (var i = 0; i < 16; i++) {\n    psdWriter_1.writeUint8(writer, byteAt(target.captionDigest, i * 2));\n  }\n}); // addHandler(\n// \t1060,\n// \ttarget => target.xmpMetadata !== undefined,\n// \t(reader, target, left) => {\n// \t\ttarget.xmpMetadata = readUtf8String(reader, left());\n// \t},\n// \t(writer, target) => {\n// \t\twriteUtf8String(writer, target.xmpMetadata!);\n// \t},\n// );\n// addHandler(\n// \t1082,\n// \ttarget => target.printInformation !== undefined,\n// \t(reader, target) => {\n// \t\tconst descriptorVersion = readInt32(reader);\n// \t\tif (descriptorVersion !== 16) {\n// \t\t\tthrow new Error(`Invalid descriptor version`);\n// \t\t}\n// \t\tconst value = readDescriptorStructure(reader);\n// \t\ttarget.printInformation = {\n// \t\t\tprinterName: value.printerName,\n// \t\t};\n// \t},\n// \t(writer, target) => {\n// \t\tconst value = target.printInformation!;\n// \t\twriteInt32(writer, 16); // descriptor version\n// \t\twriteDescriptorStructure(writer, '', 'printOutput', {\n// \t\t\tPstS: true,\n// \t\t\tInte: 'Inte.Clrm',\n// \t\t\tprintSixteenBit: false,\n// \t\t\tprinterName: value.printerName || '',\n// \t\t\tprintProofSetup: {\n// \t\t\t\tBltn: 'builtinProof.proofCMYK',\n// \t\t\t},\n// \t\t});\n// \t},\n// );\n// addHandler(\n// \t1083,\n// \ttarget => !!target,\n// \t(reader, target, left) => {\n// \t\t__data[1083] = readBytes(reader, left()); target;\n// \t},\n// \t(writer, target) => {\n// \t\twriteBytes(writer, __data[1083]); target;\n// \t},\n// );\n\naddHandler(1005, function (target) {\n  return target.resolutionInfo !== undefined;\n}, function (reader, target) {\n  var horizontalResolution = readFixedPoint32(reader);\n  var horizontalResolutionUnit = psdReader_1.readUint16(reader);\n  var widthUnit = psdReader_1.readUint16(reader);\n  var verticalResolution = readFixedPoint32(reader);\n  var verticalResolutionUnit = psdReader_1.readUint16(reader);\n  var heightUnit = psdReader_1.readUint16(reader);\n  target.resolutionInfo = {\n    horizontalResolution: horizontalResolution,\n    horizontalResolutionUnit: RESOLUTION_UNITS[horizontalResolutionUnit] || 'PPI',\n    widthUnit: MEASUREMENT_UNITS[widthUnit] || 'Inches',\n    verticalResolution: verticalResolution,\n    verticalResolutionUnit: RESOLUTION_UNITS[verticalResolutionUnit] || 'PPI',\n    heightUnit: MEASUREMENT_UNITS[heightUnit] || 'Inches'\n  };\n}, function (writer, target) {\n  var info = target.resolutionInfo;\n  writeFixedPoint32(writer, info.horizontalResolution || 0);\n  psdWriter_1.writeUint16(writer, Math.max(1, RESOLUTION_UNITS.indexOf(info.horizontalResolutionUnit)));\n  psdWriter_1.writeUint16(writer, Math.max(1, MEASUREMENT_UNITS.indexOf(info.widthUnit)));\n  writeFixedPoint32(writer, info.verticalResolution || 0);\n  psdWriter_1.writeUint16(writer, Math.max(1, RESOLUTION_UNITS.indexOf(info.verticalResolutionUnit)));\n  psdWriter_1.writeUint16(writer, Math.max(1, MEASUREMENT_UNITS.indexOf(info.heightUnit)));\n});\nvar printScaleStyles = ['centered', 'size to fit', 'user defined'];\naddHandler(1062, function (target) {\n  return target.printScale !== undefined;\n}, function (reader, target) {\n  target.printScale = {\n    style: printScaleStyles[psdReader_1.readInt16(reader)],\n    x: psdReader_1.readFloat32(reader),\n    y: psdReader_1.readFloat32(reader),\n    scale: psdReader_1.readFloat32(reader)\n  };\n}, function (writer, target) {\n  var _a = target.printScale,\n      style = _a.style,\n      x = _a.x,\n      y = _a.y,\n      scale = _a.scale;\n  psdWriter_1.writeInt16(writer, Math.max(0, printScaleStyles.indexOf(style)));\n  psdWriter_1.writeFloat32(writer, x || 0);\n  psdWriter_1.writeFloat32(writer, y || 0);\n  psdWriter_1.writeFloat32(writer, scale || 0);\n});\naddHandler(1006, function (target) {\n  return target.alphaChannelNames !== undefined;\n}, function (reader, target, left) {\n  target.alphaChannelNames = [];\n\n  while (left()) {\n    target.alphaChannelNames.push(psdReader_1.readPascalString(reader, 1));\n  }\n}, function (writer, target) {\n  for (var _i = 0, _a = target.alphaChannelNames; _i < _a.length; _i++) {\n    var name_1 = _a[_i];\n    psdWriter_1.writePascalString(writer, name_1);\n  }\n});\naddHandler(1037, function (target) {\n  return target.globalAngle !== undefined;\n}, function (reader, target) {\n  target.globalAngle = psdReader_1.readUint32(reader);\n}, function (writer, target) {\n  psdWriter_1.writeUint32(writer, target.globalAngle);\n});\naddHandler(1049, function (target) {\n  return target.globalAltitude !== undefined;\n}, function (reader, target) {\n  target.globalAltitude = psdReader_1.readUint32(reader);\n}, function (writer, target) {\n  psdWriter_1.writeUint32(writer, target.globalAltitude);\n}); // addHandler(\n// \t1011,\n// \ttarget => !!target,\n// \t(reader, target, left) => {\n// \t\t__data[1011] = readBytes(reader, left()); target;\n// \t},\n// \t(writer, target) => {\n// \t\twriteBytes(writer, __data[1011]); target;\n// \t},\n// );\n// addHandler(\n// \t10000,\n// \ttarget => !!target,\n// \t(reader, target, left) => {\n// \t\t__data[10000] = readBytes(reader, left()); target;\n// \t},\n// \t(writer, target) => {\n// \t\twriteBytes(writer, __data[10000]); target;\n// \t},\n// );\n// addHandler(\n// \t1013,\n// \ttarget => !!target,\n// \t(reader, target, left) => {\n// \t\t__data[1013] = readBytes(reader, left()); target;\n// \t},\n// \t(writer, target) => {\n// \t\twriteBytes(writer, __data[1013]); target;\n// \t},\n// );\n// addHandler(\n// \t1016,\n// \ttarget => !!target,\n// \t(reader, target, left) => {\n// \t\t__data[1016] = readBytes(reader, left()); target;\n// \t},\n// \t(writer, target) => {\n// \t\twriteBytes(writer, __data[1016]); target;\n// \t},\n// );\n\naddHandler(1024, function (target) {\n  return target.layerState !== undefined;\n}, function (reader, target) {\n  target.layerState = psdReader_1.readUint16(reader);\n}, function (writer, target) {\n  psdWriter_1.writeUint16(writer, target.layerState);\n});\naddHandler(1026, function (target) {\n  return target.layersGroup !== undefined;\n}, function (reader, target, left) {\n  target.layersGroup = [];\n\n  while (left()) {\n    target.layersGroup.push(psdReader_1.readUint16(reader));\n  }\n}, function (writer, target) {\n  for (var _i = 0, _a = target.layersGroup; _i < _a.length; _i++) {\n    var g = _a[_i];\n    psdWriter_1.writeUint16(writer, g);\n  }\n});\naddHandler(1072, function (target) {\n  return target.layerGroupsEnabledId !== undefined;\n}, function (reader, target, left) {\n  target.layerGroupsEnabledId = [];\n\n  while (left()) {\n    target.layerGroupsEnabledId.push(psdReader_1.readUint8(reader));\n  }\n}, function (writer, target) {\n  for (var _i = 0, _a = target.layerGroupsEnabledId; _i < _a.length; _i++) {\n    var id = _a[_i];\n    psdWriter_1.writeUint8(writer, id);\n  }\n});\naddHandler(1069, function (target) {\n  return target.layerSelectionIds !== undefined;\n}, function (reader, target) {\n  var count = psdReader_1.readUint16(reader);\n  target.layerSelectionIds = [];\n\n  while (count--) {\n    target.layerSelectionIds.push(psdReader_1.readUint32(reader));\n  }\n}, function (writer, target) {\n  psdWriter_1.writeUint16(writer, target.layerSelectionIds.length);\n\n  for (var _i = 0, _a = target.layerSelectionIds; _i < _a.length; _i++) {\n    var id = _a[_i];\n    psdWriter_1.writeUint32(writer, id);\n  }\n});\naddHandler(1032, function (target) {\n  return target.gridAndGuidesInformation !== undefined;\n}, function (reader, target) {\n  target.gridAndGuidesInformation = {\n    version: psdReader_1.readUint32(reader),\n    grid: {\n      horizontal: psdReader_1.readUint32(reader),\n      vertical: psdReader_1.readUint32(reader)\n    },\n    guides: []\n  };\n  var count = psdReader_1.readUint32(reader);\n\n  while (count--) {\n    target.gridAndGuidesInformation.guides.push({\n      location: psdReader_1.readUint32(reader) / 32,\n      direction: psdReader_1.readUint8(reader) ? 'horizontal' : 'vertical'\n    });\n  }\n}, function (writer, target) {\n  var info = target.gridAndGuidesInformation;\n  var version = info.version || 1;\n  var grid = info.grid || {\n    horizontal: 18 * 32,\n    vertical: 18 * 32\n  };\n  var guides = info.guides || [];\n  psdWriter_1.writeUint32(writer, version);\n  psdWriter_1.writeUint32(writer, grid.horizontal);\n  psdWriter_1.writeUint32(writer, grid.vertical);\n  psdWriter_1.writeUint32(writer, guides.length);\n  guides.forEach(function (g) {\n    psdWriter_1.writeUint32(writer, g.location * 32);\n    psdWriter_1.writeUint8(writer, g.direction === 'horizontal' ? 1 : 0);\n  });\n});\naddHandler(1045, function (target) {\n  return target.unicodeAlphaNames !== undefined;\n}, function (reader, target, left) {\n  target.unicodeAlphaNames = [];\n\n  while (left()) {\n    target.unicodeAlphaNames.push(psdReader_1.readUnicodeString(reader));\n  }\n}, function (writer, target) {\n  for (var _i = 0, _a = target.unicodeAlphaNames; _i < _a.length; _i++) {\n    var name_2 = _a[_i];\n    psdWriter_1.writeUnicodeString(writer, name_2);\n  }\n});\naddHandler(1053, function (target) {\n  return target.alphaIdentifiers !== undefined;\n}, function (reader, target, left) {\n  target.alphaIdentifiers = [];\n\n  while (left() >= 4) {\n    target.alphaIdentifiers.push(psdReader_1.readUint32(reader));\n  }\n}, function (writer, target) {\n  for (var _i = 0, _a = target.alphaIdentifiers; _i < _a.length; _i++) {\n    var id = _a[_i];\n    psdWriter_1.writeUint32(writer, id);\n  }\n});\naddHandler(1054, function (target) {\n  return target.urlsList !== undefined;\n}, function (reader, target, _, options) {\n  var count = psdReader_1.readUint32(reader);\n\n  if (count) {\n    if (!options.throwForMissingFeatures) return;\n    throw new Error('Not implemented: URL List');\n  }\n\n  target.urlsList = [];\n}, function (writer, target) {\n  psdWriter_1.writeUint32(writer, target.urlsList.length);\n  if (target.urlsList.length) throw new Error('Not implemented: URL List');\n}); // addHandler(\n// \t1050,\n// \ttarget => !!target,\n// \t(reader, target, left) => {\n// \t\t__data[1050] = readBytes(reader, left()); target;\n// \t},\n// \t(writer, target) => {\n// \t\twriteBytes(writer, __data[1050]); target;\n// \t},\n// );\n\naddHandler(1064, function (target) {\n  return target.pixelAspectRatio !== undefined;\n}, function (reader, target) {\n  target.pixelAspectRatio = {\n    version: psdReader_1.readUint32(reader),\n    aspect: psdReader_1.readFloat64(reader)\n  };\n}, function (writer, target) {\n  psdWriter_1.writeUint32(writer, target.pixelAspectRatio.version);\n  psdWriter_1.writeFloat64(writer, target.pixelAspectRatio.aspect);\n}); // addHandler(\n// \t1039,\n// \ttarget => !!target,\n// \t(reader, target, left) => {\n// \t\t__data[1039] = readBytes(reader, left()); target;\n// \t},\n// \t(writer, target) => {\n// \t\twriteBytes(writer, __data[1039]); target;\n// \t},\n// );\n// addHandler(\n// \t1044,\n// \ttarget => !!target,\n// \t(reader, target, left) => {\n// \t\t__data[1044] = readBytes(reader, left()); target;\n// \t},\n// \t(writer, target) => {\n// \t\twriteBytes(writer, __data[1044]); target;\n// \t},\n// );\n\naddHandler(1036, function (target) {\n  return target.thumbnail !== undefined;\n}, function (reader, target, left) {\n  var format = psdReader_1.readUint32(reader); // 1 = kJpegRGB, 0 = kRawRGB\n\n  var width = psdReader_1.readUint32(reader);\n  var height = psdReader_1.readUint32(reader);\n  var widthBytes = psdReader_1.readUint32(reader); // = (width * bits_per_pixel + 31) / 32 * 4.\n\n  var totalSize = psdReader_1.readUint32(reader); // = widthBytes * height * planes\n\n  var sizeAfterCompression = psdReader_1.readUint32(reader);\n  var bitsPerPixel = psdReader_1.readUint16(reader); // 24\n\n  var planes = psdReader_1.readUint16(reader); // 1\n\n  if (format !== 1 || bitsPerPixel !== 24 || planes !== 1) {\n    console.log(\"invalid thumbnail data (format: \" + format + \", bitsPerPixel: \" + bitsPerPixel + \", planes: \" + planes + \")\");\n    psdReader_1.skipBytes(reader, left());\n    return;\n  }\n\n  width;\n  height;\n  widthBytes;\n  totalSize;\n  sizeAfterCompression;\n  var size = left();\n  var bytes = psdReader_1.readBytes(reader, size);\n  target.thumbnail = helpers_1.createCanvasFromData(bytes);\n}, function (writer, target) {\n  var thumb = target.thumbnail;\n  var data = base64_js_1.toByteArray(thumb.toDataURL('image/jpeg', 1).substr('data:image/jpeg;base64,'.length));\n  var bitsPerPixel = 24;\n  var widthBytes = (thumb.width * bitsPerPixel + 31) / 32 * 4;\n  var planes = 1;\n  var totalSize = widthBytes * thumb.height * planes;\n  var sizeAfterCompression = data.length;\n  psdWriter_1.writeUint32(writer, 1); // 1 = kJpegRGB\n\n  psdWriter_1.writeUint32(writer, thumb.width);\n  psdWriter_1.writeUint32(writer, thumb.height);\n  psdWriter_1.writeUint32(writer, widthBytes);\n  psdWriter_1.writeUint32(writer, totalSize);\n  psdWriter_1.writeUint32(writer, sizeAfterCompression);\n  psdWriter_1.writeUint16(writer, bitsPerPixel);\n  psdWriter_1.writeUint16(writer, planes);\n  psdWriter_1.writeBytes(writer, data);\n});\naddHandler(1057, function (target) {\n  return target.versionInfo !== undefined;\n}, function (reader, target, left) {\n  target.versionInfo = {\n    version: psdReader_1.readUint32(reader),\n    hasRealMergedData: !!psdReader_1.readUint8(reader),\n    writerName: psdReader_1.readUnicodeString(reader),\n    readerName: psdReader_1.readUnicodeString(reader),\n    fileVersion: psdReader_1.readUint32(reader)\n  };\n  psdReader_1.skipBytes(reader, left());\n}, function (writer, target) {\n  var versionInfo = target.versionInfo;\n  psdWriter_1.writeUint32(writer, versionInfo.version);\n  psdWriter_1.writeUint8(writer, versionInfo.hasRealMergedData ? 1 : 0);\n  psdWriter_1.writeUnicodeString(writer, versionInfo.writerName);\n  psdWriter_1.writeUnicodeString(writer, versionInfo.readerName);\n  psdWriter_1.writeUint32(writer, versionInfo.fileVersion);\n}); // addHandler(\n// \t1058,\n// \ttarget => !!target,\n// \t(reader, target, left) => {\n// \t\t__data[1058] = readBytes(reader, left()); target;\n// \t},\n// \t(writer, target) => {\n// \t\twriteBytes(writer, __data[1058]); target;\n// \t},\n// );","map":null,"metadata":{},"sourceType":"script"}